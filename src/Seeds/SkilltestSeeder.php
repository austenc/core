<?php namespace Hdmaster\Core\Seeds;

use \Skilltest;
use \Skilltask;
use \Training;
use \Skillexam;
use \Exam;
use Illuminate\Database\Seeder;

class SkilltestSeeder extends Seeder
{
    public function run()
    {
        \Eloquent::unguard();
        $faker = \Faker\Factory::create();

        // dont seed if table already has records
        if (\DB::table('skilltests')->exists()) {
            return;
        }

        // randomly picks a number bt min/max to decide # of tests for an exam
        $minTests = 5;
        $maxTests = 30;

        // minimum passing score
        $minScoreChoice = [60, 65, 70, 75, 80, 85];

        // all skill exam ids
        $skillexamIds = Skillexam::lists('id')->all();

        // create tests for each skillexam
        foreach ($skillexamIds as $examId) {
            $numExamTests = $faker->numberBetween($minTests, $maxTests);
            $numTests = 0;

            // lookup skillexam (including all active tasks for the exam)
            $skillexam = Skillexam::with([
                'tasks' => function ($query) {
                    $query->where('status', 'active');
                }
            ])->find($examId);

            // available tasks for this exam
            $activeTaskIds = $skillexam->tasks->lists('id')->all();
            $taskWeightLookup = $skillexam->tasks->lists('weight', 'id')->all();

            foreach (range(1, $numExamTests) as $i) {
                // create skilltest
                $test = Skilltest::create([
                    'skillexam_id'    => $examId,
                    'header'        => ucwords(implode(' ', $faker->words(3))),
                    'status'        => $faker->boolean() ? 'active' : 'draft',
                    'minimum'        => $faker->randomElement($minScoreChoice),
                    'description'    => $faker->sentence(10),
                    'comments'        => ($faker->boolean() ? $faker->paragraph(3) : null)
                ]);

                // add some tasks
                $numTasks      = $faker->numberBetween(3, 6);
                $usedTasks     = [];
                $weightTaskStr = "";
            
                // current task enemies (of this skilltest, made up of enemies of each task in the test)
                $currEnemies = [];
                // ordinal of the current task
                $ord         = 1;

                foreach (range(1, $numTasks) as $t) {
                    $foundTask = false;    // flag to stop looking when we find an eligible task
                    $count     = 0;        // count to stop us after looking at all eligible tasks

                    // get all current tasks for this skilltest
                    $currTasks = $test->tasks()->lists('id')->all();

                    // each task in the skilltest
                    foreach ($currTasks as $taskId) {
                        $task = Skilltask::with('enemies')->find($taskId);

                        $currEnemies = array_unique(array_merge($currEnemies, $task->enemies->lists('id')->all()));
                    }

                    // remove all $currEnemies (task ids) from the $activeTaskIds array
                    $activeTaskIds = array_diff_key($activeTaskIds, array_flip($currEnemies));

                    // look for an available task for this test until we run out of tasks
                    while (($foundTask !== true) && ($count < count($activeTaskIds))) {
                        // choose a random task from all active
                        $currTaskId     = $activeTaskIds[array_rand($activeTaskIds)];
                        $currTaskWeight = $taskWeightLookup[$currTaskId];

                        if (! in_array($currTaskId, $usedTasks)) {
                            $usedTasks[] = $currTaskId;

                            // connect to test
                            $test->tasks()->attach($currTaskId, ['ordinal' => $ord]);

                            $weightTaskStr .= $currTaskWeight;
                            $foundTask = true;
                            $ord++;        // increment for next ordinal
                        }

                        $count++;
                    }
                }

                // add the weight string to comments
                $test->comments = "Generated by: ".$weightTaskStr;
                $test->save();

                $numTests++;
            } // end FOREACH num tests

            $this->command->info('Skillexam #'.$examId.' -- '.$numTests.' Tests seeded!');
        } // end FOREACH skillexam
    }
}
